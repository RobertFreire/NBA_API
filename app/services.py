from nba_api.stats.static import teams
from nba_api.stats.endpoints import TeamDashboardByGeneralSplits, LeagueStandings
import pandas as pd
import os

DATA_DIR = os.path.join(os.getcwd(), "data")
os.makedirs(DATA_DIR, exist_ok=True)  # Criar o diret√≥rio caso n√£o exista

### üîπ RF1 - LISTA DE TIMES POR CONFER√äNCIA ###
def get_teams_by_conference():
    """Lista os times da NBA agrupados por Confer√™ncia Leste e Oeste."""
    nba_teams = teams.get_teams()

    # Dicion√°rio com a divis√£o correta das confer√™ncias
    eastern_conference = [
        "Boston Celtics", "Brooklyn Nets", "New York Knicks", "Philadelphia 76ers", "Toronto Raptors",
        "Chicago Bulls", "Cleveland Cavaliers", "Detroit Pistons", "Indiana Pacers", "Milwaukee Bucks",
        "Atlanta Hawks", "Charlotte Hornets", "Miami Heat", "Orlando Magic", "Washington Wizards"
    ]
    
    western_conference = [
        "Denver Nuggets", "Minnesota Timberwolves", "Oklahoma City Thunder", "Portland Trail Blazers", "Utah Jazz",
        "Golden State Warriors", "Los Angeles Clippers", "Los Angeles Lakers", "Phoenix Suns", "Sacramento Kings",
        "Dallas Mavericks", "Houston Rockets", "Memphis Grizzlies", "New Orleans Pelicans", "San Antonio Spurs"
    ]

    east_teams = []
    west_teams = []

    for team in nba_teams:
        team_info = {"id": team["id"], "name": team["full_name"]}

        if team["full_name"] in eastern_conference:
            east_teams.append(team_info)
        elif team["full_name"] in western_conference:
            west_teams.append(team_info)

    return {
        "Confer√™ncia Leste": east_teams,
        "Confer√™ncia Oeste": west_teams
    }

### üîπ RF2 - CLASSIFICA√á√ÉO ATUAL DOS TIMES ###
def get_team_rankings():
    """Obt√©m a classifica√ß√£o atual dos times da NBA agrupados por confer√™ncia."""
    standings = LeagueStandings().get_data_frames()[0]

    east_teams = standings[standings["Conference"] == "East"][["TeamID", "TeamCity", "TeamName", "ConferenceRank"]]
    west_teams = standings[standings["Conference"] == "West"][["TeamID", "TeamCity", "TeamName", "ConferenceRank"]]

    rankings = {
        "Confer√™ncia Leste": east_teams.to_dict(orient="records"),
        "Confer√™ncia Oeste": west_teams.to_dict(orient="records"),
    }

    return rankings

### üîπ RF3 - ESTAT√çSTICAS DO TIME (VIT√ìRIAS E DERROTAS) ###
def get_team_results(team_id, season="2023-24"):
    """Obt√©m estat√≠sticas detalhadas do time na temporada, separando vit√≥rias e derrotas por casa e fora."""
    team_stats = TeamDashboardByGeneralSplits(team_id=team_id, season=season)
    df = team_stats.get_data_frames()[1]  # √çndice 1 cont√©m estat√≠sticas de casa e fora
    
    selected_columns = {
        "W": "Total de Vit√≥rias",
        "W_HOME": "Total de Vit√≥rias em Casa",
        "W_ROAD": "Total de Vit√≥rias Fora de Casa",
        "L": "Total de Derrotas",
        "L_HOME": "Total de Derrotas em Casa",
        "L_ROAD": "Total de Derrotas Fora de Casa"
    }

    df = df[list(selected_columns.keys())]
    df.rename(columns=selected_columns, inplace=True)

    return {
        "team_id": team_id,
        "season": season,
        "stats": df.to_dict(orient="records")
    }

### üîπ RF4, RF5, RF6 - ESTAT√çSTICAS GERAIS E DEFENSIVAS ###
def get_team_advanced_stats(team_id, season="2023-24"):
    """Obt√©m estat√≠sticas avan√ßadas do time para a temporada."""
    team_stats = TeamDashboardByGeneralSplits(team_id=team_id, season=season)
    df = team_stats.get_data_frames()[0]  # √çndice 0 cont√©m estat√≠sticas gerais

    selected_columns = {
        "PTS": "Total de Pontos por Jogo",
        "AST": "Total de Assist√™ncias por Jogo",
        "REB": "Total de Rebotes por Jogo",
        "FG3M": "Total de Cestas de 3 Pontos Convertidas",
        "REB_O": "Total de Rebotes Ofensivos",
        "REB_D": "Total de Rebotes Defensivos",
        "BLK": "Total de Tocos por Jogo",
        "TOV": "Total de Erros por Jogo",
        "PF": "Total de Faltas por Jogo"
    }

    df = df[list(selected_columns.keys())]
    df.rename(columns=selected_columns, inplace=True)

    return {
        "team_id": team_id,
        "season": season,
        "stats": df.to_dict(orient="records")
    }
